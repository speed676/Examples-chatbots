diff --git a/README.md b/README.md
index 810cc59..a1860fa 100644
--- a/README.md
+++ b/README.md
@@ -549,6 +549,7 @@ Object that stores a specific message that can be sent to/received from a user.
         * [.participants](#Message+participants) ⇒ <code>array</code>
         * [.mention](#Message+mention) ⇒ <code>string</code>
         * [.picked](#Message+picked) ⇒ <code>array</code>
+        * [.metadata](#Message+metadata) ⇒ <code>object</code>
         * [.isTextMessage()](#Message+isTextMessage) ⇒ <code>boolean</code>
         * [.isLinkMessage()](#Message+isLinkMessage) ⇒ <code>boolean</code>
         * [.isPictureMessage()](#Message+isPictureMessage) ⇒ <code>boolean</code>
@@ -766,6 +767,11 @@ See https://dev.kik.com/#/docs/messaging#friend-picker
 **Kind**: instance property of <code>[Message](#Message)</code>
 <a name="Message+isTextMessage"></a>

+### message.metadata ⇒ <code>object</code>
+
+**Kind**: instance property of <code>[Message](#Message)</code>
+<a name="Message+isTextMessage"></a>
+
 ### message.isTextMessage() ⇒ <code>boolean</code>
 See https://dev.kik.com/#/docs/messaging#text

@@ -1167,25 +1173,25 @@ See https://dev.kik.com/#/docs/messaging#kik-code-colors
 | Marine | <code>number</code> | <code>14</code> | #353CD4 |
 | Steel | <code>number</code> | <code>15</code> | #5D7687 |

+<a name="Response"></a>
 ## Response
 See https://dev.kik.com/#/docs/messaging#suggested-response-keyboard
-<a name="Response"></a>

 **Kind**: global class

+<a name="Response.text"></a>
 ### Response.text(body) ⇒ <code>[Response](#Response)</code>

 **Kind**: static method of <code>[Response](#Response)</code>
-<a name="Response.text"></a>

 | Param | Type |
 | --- | --- |
 | body | <code>string</code> |

+<a name="Response.friendPicker"></a>
 ### Response.friendPicker([body], [min], [max], [preselected]) ⇒ <code>[Response](#Response)</code>

 **Kind**: static method of <code>[Response](#Response)</code>
-<a name="Response.friendPicker"></a>

 | Param | Type | Description |
 | --- | --- | --- |
@@ -1193,3 +1199,13 @@ See https://dev.kik.com/#/docs/messaging#suggested-response-keyboard
 | [min] | <code>int</code> | |
 | [max] | <code>int</code>| |
 | [preselected] | <code>array</code> | array of strings |
+
+<a name="Response.picture"></a>
+### Response.picture(picUrl, metadata) ⇒ <code>[Response](#Response)</code>
+
+**Kind**: static method of <code>[Response](#Response)</code>
+
+| Param | Type |
+| --- | --- |
+| picUrl | <code>string</code> |
+| metadata | <code>object</code> |
diff --git a/lib/message.js b/lib/message.js
index 2739717..2847baa 100644
--- a/lib/message.js
+++ b/lib/message.js
@@ -605,6 +605,13 @@ class Message {
     }

     /**
+     *  @return {object}
+     */
+    get metadata() {
+        return this._state.metadata;
+    }
+
+    /**
      *  @param {object} kikJsData
      *  @return {Message}
      */
diff --git a/lib/response.js b/lib/response.js
index 877c590..bbf162e 100644
--- a/lib/response.js
+++ b/lib/response.js
@@ -17,11 +17,11 @@ class Response {
             response.body = '' + body;
         }

-        if (!isNaN(min)) {
+        if (!isNaN(min) && min !== null) {
             response.min = min;
         }

-        if (!isNaN(max)) {
+        if (!isNaN(max) && max !== null) {
             response.max = max;
         }

@@ -32,6 +32,14 @@ class Response {
         return response;
     }

+    static picture(picUrl, metadata) {
+        return {
+            type: 'picture',
+            picUrl: picUrl,
+            metadata: metadata
+        };
+    }
+
 }

 module.exports = Response;
diff --git a/test/test-message-construction.js b/test/test-message-construction.js
index af74a0e..5b309d7 100644
--- a/test/test-message-construction.js
+++ b/test/test-message-construction.js
@@ -668,4 +668,18 @@ describe('Message parsing', () => {
             '859537ca-3ae4-46fc-bb18-6e7ba3182c0f', '6d8d060c-3ae4-46fc-bb18-6e7ba3182c0f'
         ]);
     });
+
+    it('handles metadata', () => {
+        const message = Bot.Message.fromJSON({
+            'type': 'picture',
+            'from': 'atestuser',
+            'picUrl': 'picurl',
+            'id': '9a8764cb-3ae4-46fc-bb18-9871decfa11a',
+            'metadata': { 'foo': 'bar' }
+        });
+
+        assert.ok(message.isPictureMessage());
+
+        assert.deepEqual(message.metadata, { 'foo': 'bar' });
+    });
 });
diff --git a/test/test-response.js b/test/test-response.js
new file mode 100644
index 0000000..d7a67d6
--- /dev/null
+++ b/test/test-response.js
@@ -0,0 +1,103 @@
+'use strict';
+
+const assert = require('assert');
+const Bot = require('../index.js');
+
+describe('responses', () => {
+    describe('text', () => {
+        it('can be generated with a string', () => {
+            const response = Bot.Response.text('yolo');
+
+            assert.deepEqual(response, {
+                'type': 'text',
+                'body': 'yolo'
+            });
+        });
+
+        it('can be generated with a number', () => {
+            const response = Bot.Response.text(123);
+
+            assert.deepEqual(response, {
+                'type': 'text',
+                'body': '123'
+            });
+            assert.equal(response.body.length, 3);
+        });
+    });
+
+    describe('friend picker', () => {
+        it('can be initialized with no parameters', () => {
+            const response = Bot.Response.friendPicker();
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker'
+            });
+        });
+
+        it('can be initialized with a string', () => {
+            const response = Bot.Response.friendPicker('yolo');
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker',
+                'body': 'yolo'
+            });
+        });
+
+        it('can be initialized with a min value', () => {
+            const response = Bot.Response.friendPicker('yolo', 3);
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker',
+                'body': 'yolo',
+                'min': 3
+            });
+        });
+
+        it('can be initialized with min and max value', () => {
+            const response = Bot.Response.friendPicker('yolo', 3, 5);
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker',
+                'body': 'yolo',
+                'min': 3,
+                'max': 5
+            });
+        });
+
+        it('can be initialized with min and max value and preselected users', () => {
+            const response = Bot.Response.friendPicker('yolo', 3, 5, ['remi', 'was', 'here']);
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker',
+                'body': 'yolo',
+                'min': 3,
+                'max': 5,
+                'preselected': ['remi', 'was', 'here']
+            });
+        });
+
+        it('can be initialized with just preselected users', () => {
+            const response = Bot.Response.friendPicker('yolo', null, null, ['remi', 'was', 'here']);
+
+            assert.deepEqual(response, {
+                'type': 'friend-picker',
+                'body': 'yolo',
+                'preselected': ['remi', 'was', 'here']
+            });
+        });
+    });
+
+    describe('picture', () => {
+        it('can be initialized with a picture URL and metadata', () => {
+            const response = Bot.Response.picture('remi', { 'was': 'here' });
+
+            assert.deepEqual(response, {
+                'type': 'picture',
+                'picUrl': 'remi',
+                'metadata': {
+                    'was': 'here'
+                }
+            });
+        });
+    });
+});
